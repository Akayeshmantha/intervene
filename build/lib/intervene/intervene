#!/usr/bin/env python
"""
InterVene: a tool for intersection and visualization of multiple genomic region sets
Created on January 10, 2017
Version: 1.0
@author: <Aziz Khan>aziz.khan@ncmm.uio.no
"""
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from pybedtools import BedTool, example_bedtool
from intervene import venn, helper
import argparse
import sys
import os

__version__ = '1.0'

def intersect_2bed(a,b):

    a = BedTool(a)
    b = BedTool(b)

    labels = {'10': str((a - b).count()), #Only A
     '01': str((b - a).count()), #Only B
     '11': str((a + b).count())} #Common in A and B

    return labels

def intersect_3bed(a,b,c,plot_type=None):

    a = BedTool(a)
    b = BedTool(b)
    c = BedTool(c)

    if plot_type == 'upset':
        expressionInput = ''
        #expressionInput <- c(one = 2, two = 1, three = 2, `one&two` = 1, `one&three` = 4, `two&three` = 1, `one&two&three` = 2)
    else:

        labels = {'001': (c - a - b).count(),
         '010': (b - a - c).count(),
         '011': (b + c - a).count(),
         '100': (a - b - c).count(),
         '101': (a + c - b).count(),
         '110': (a + b - c).count(),
         '111': (a + b + c).count()}

        return labels

def intersect_4bed(a,b,c,d):

    a = BedTool(a)
    b = BedTool(b)
    c = BedTool(c)
    d = BedTool(d)

    #ABCD
    labels = {'0001': str((d - a - b - c).count()),
    '0010': str((c - a - b - d).count()),
    '0011': str((d + c - b - a).count()),
    '0100': str((b - a - d - c).count()),
    '0101': str((b + d - a - c).count()),
    '0110': str((b + c - a - d).count()),
    '0111': str((d + b + c - a).count()),
    '1000': str((a - b - c - d).count()),
    '1001': str((a + d - b - c).count()),
    '1010': str((a + c - b - d).count()),
    '1011': str((a + c + d - b).count()),
    '1100': str((a + b - c - d).count()),
    '1101': str((a + b + d - c).count()),
    '1110': str((a + b + c - d).count()),
    '1111': str((a + b + c + d).count())
    }

    return labels

def intersect_5bed(a,b,c,d,e):

    a = BedTool(a)
    b = BedTool(b)
    c = BedTool(c)
    d = BedTool(d)
    e = BedTool(e)

    #ABCDE
    labels = {'00001': str((- a - b - c - d + e).count()),
    '00010': str((- a - b - c + d - e).count()),
    '00011': str((- a - b - c + d + e).count()),
    '00100': str((- a - b - c - d - e).count()),
    '00101': str((- a - b - c - d - e).count()),
    '00110': str((- a - b - c - d - e).count()),
    '00111': str((- a - b - c - d - e).count()),
    '01000': str((- a - b - c - d - e).count()),
    '01001': str((- a - b - c - d - e).count()),
    '01010': str((- a - b - c - d - e).count()),
    '01011': str((- a - b - c - d - e).count()),
    '01100': str((- a - b - c - d - e).count()),
    '01101': str((- a - b - c - d - e).count()),
    '01110': str((- a - b - c - d - e).count()),
    '01111': str((- a - b - c - d - e).count()),
    '10000': str((- a - b - c - d - e).count()),
    '10001': str((- a - b - c - d - e).count()),
    '10010': str((- a - b - c - d - e).count()),
    '10011': str((- a - b - c - d - e).count()),
    '10100': str((- a - b - c - d - e).count()),
    '10101': str((- a - b - c - d - e).count()),
    '10110': str((- a - b - c - d - e).count()),
    '10111': str((- a - b - c - d - e).count()),
    '11000': str((- a - b - c - d - e).count()),
    '11001': str((- a - b - c - d - e).count()),
    '11010': str((- a - b - c - d - e).count()),
    '11011': str((- a - b - c - d - e).count()),
    '11100': str((- a - b - c - d - e).count()),
    '11101': str((- a - b - c - d - e).count()),
    '11110': str((- a - b - c - d - e).count()),
    '11111': str((- a - b - c - d - e).count())
    }

    return labels


def intersect_6bed(a,b,c,d,e,f):

    a = BedTool(a)
    b = BedTool(b)
    c = BedTool(c)
    d = BedTool(d)
    e = BedTool(e)
    f = BedTool(f)

    #ABCDEF
    labels = {'000001': str((- a - b - c - d - e + f).count()),
    '000010': str((- a - b - c - d + e - f).count()),
    '000011': str((- a - b - c + d + e + f).count()),
    '000100': str((- a - b - c - d - e - f).count()),
    '000101': str((- a - b - c - d - e - f).count()),
    '000110': str((- a - b - c - d - e - f).count()),
    '000111': str((- a - b - c - d - e - f).count()),
    '001000': str((- a - b - c - d - e - f).count()),
    '001001': str((- a - b - c - d - e - f).count()),
    '001010': str((- a - b - c - d - e - f).count()),
    '001011': str((- a - b - c - d - e - f).count()),
    '001100': str((- a - b - c - d - e - f).count()),
    '001101': str((- a - b - c - d - e - f).count()),
    '001110': str((- a - b - c - d - e - f).count()),
    '001111': str((- a - b - c - d - e - f).count()),
    '010000': str((- a - b - c - d - e - f).count()),
    '010001': str((- a - b - c - d - e - f).count()),
    '010010': str((- a - b - c - d - e - f).count()),
    '010011': str((- a - b - c - d - e - f).count()),
    '010100': str((- a - b - c - d - e - f).count()),
    '010101': str((- a - b - c - d - e - f).count()),
    '010110': str((- a - b - c - d - e - f).count()),
    '010111': str((- a - b - c - d - e - f).count()),
    '011000': str((- a - b - c - d - e - f).count()),
    '011001': str((- a - b - c - d - e - f).count()),
    '011010': str((- a - b - c - d - e - f).count()),
    '011011': str((- a - b - c - d - e - f).count()),
    '011100': str((- a - b - c - d - e - f).count()),
    '011101': str((- a - b - c - d - e - f).count()),
    '011110': str((- a - b - c - d - e - f).count()),
    '011111': str((- a - b - c - d - e - f).count()),
    '100000': str((- a - b - c - d - e - f).count()),
    '100001': str((- a - b - c - d - e - f).count()),
    '100010': str((- a - b - c - d - e - f).count()),
    '100011': str((- a - b - c - d - e - f).count()),
    '100100': str((- a - b - c - d - e - f).count()),
    '100101': str((- a - b - c - d - e - f).count()),
    '100110': str((- a - b - c - d - e - f).count()),
    '100111': str((- a - b - c - d - e - f).count()),
    '101000': str((- a - b - c - d - e - f).count()),
    '101001': str((- a - b - c - d - e - f).count()),
    '101010': str((- a - b - c - d - e - f).count()),
    '101011': str((- a - b - c - d - e - f).count()),
    '101100': str((- a - b - c - d - e - f).count()),
    '101101': str((- a - b - c - d - e - f).count()),
    '101110': str((- a - b - c - d - e - f).count()),
    '101111': str((- a - b - c - d - e - f).count()),
    '110000': str((- a - b - c - d - e - f).count()),
    '110001': str((- a - b - c - d - e - f).count()),
    '110010': str((- a - b - c - d - e - f).count()),
    '110011': str((- a - b - c - d - e - f).count()),
    '110100': str((- a - b - c - d - e - f).count()),
    '110101': str((- a - b - c - d - e - f).count()),
    '110110': str((- a - b - c - d - e - f).count()),
    '110111': str((- a - b - c - d - e - f).count()),
    '111000': str((- a - b - c - d - e - f).count()),
    '111001': str((- a - b - c - d - e - f).count()),
    '111010': str((- a - b - c - d - e - f).count()),
    '111011': str((- a - b - c - d - e - f).count()),
    '111100': str((- a - b - c - d - e - f).count()),
    '111101': str((- a - b - c - d - e - f).count()),
    '111110': str((- a - b - c - d - e - f).count()),
    '111111': str((- a - b - c - d - e - f).count())
    }
    return labels


def main():
    #print 'InterVene: a tool for intersection and visualization of multiple genomic region sets'
    #print 'For more details: https://github.com/asntech/intervene'
    
    desc = """
    
    InterVene: a tool for intersection and visualization of multiple genomic region sets.

    For more details: https://github.com/asntech/intervene

    """
    #print desc
    
    parser = argparse.ArgumentParser(usage='intervene <subcommand> [options]', description=desc)
    subparsers = parser.add_subparsers(dest='command',help='List of subcommands')

    #pairwise
    pairwise_parser = subparsers.add_parser('pairwise', usage='intervene pairwise [options]', 
        description='Pairwise intersection of <BED/GTF/GFF/VCF>.',
        help='Pairwise intersection of <BED/GTF/GFF/VCF>.')
    pairwise_parser.add_argument('-i','--input', dest='input', nargs="*", action='append',
        help='Input BED/GTF/GFF/VCF files. For BED files in a directory use *.bed')
    
    pairwise_parser.add_argument('--type', choices=('count','frac','jaccard','fisher','reldist'),
        default='frac', help='Report count/fraction of overlaps or statistical relationships. \n'
                       '{frac}-> calculates the fraction of overlap. \n'
                       'jaccard - Calculate the Jaccard statistic. '
                       'reldist - Calculate the distribution of relative distances. '
                       'fisher - Calculate Fisher statistic. '
                       'Default is "%(default)s"')
   
    pairwise_parser.add_argument('--enrichment', action='store_true',
                    help='Run randomizations (default 1000, specify otherwise '
                    'with --iterations) on each pairwise comparison and '
                    'compute the enrichment score as '
                    '(actual intersection count + 1) / (median randomized + 1)'
                    )
    pairwise_parser.add_argument('--genome', help='Required argument if --enrichment is '
                    'used. Needs to be a string assembly name like "dm3" or '
                    '"hg19"')
    pairwise_parser.add_argument('--iterations', default=1000, type=int,
                    help='Number of randomizations to perform for enrichement '
                    'scores')

    #venn
    venn_parser = subparsers.add_parser('venn', usage='intervene venn [options]', 
        description='Create Venn diagram upto 6-way after intersection of BED or list sets.', 
        help='Venn diagram upto 6-way of BED or list sets.')
    venn_parser.add_argument('-a', dest="a", required=True, default=None, help='BED or list of genes/names file 1 (required)')
    venn_parser.add_argument('-b', dest="b", required=True, default=None, help='BED or list of genes/names file 2 (required)')
    venn_parser.add_argument('-c', dest="c", default=None, help='BED or list of genes/names file 3 (optional)')
    venn_parser.add_argument('-d', dest="d", default=None, help='BED or list of genes/names file 4 (optional)')
    venn_parser.add_argument('-e', dest="e", default=None, help='BED or list of genes/names file 5 (optional)')
    venn_parser.add_argument('-f', dest="f", default=None, help='BED or list of genes/names file 6 (optional)')
    
    venn_parser.add_argument('--type', dest='type', choices=('bed','list'),
                  help='Type of input sets. BED files or lists of genes. ')
   
    venn_parser.add_argument('--labels', dest='labels', default='A,B,C,D,E,F',
                  help='Comma-separated list of names for input files. '
                       'Default is: --labels=A,B,C,D,E,F')
   
    venn_parser.add_argument('--colors', dest='colors',
                  help='Comma-separated list of matplotlib-valid colors. '
                       'E.g., --colors=r,b,k')
    
    venn_parser.add_argument('-o', default='InterVene_output.pdf', 
                  help='Output file name with extension {name.pdf, name.svg, name.png}.'
                       'Default is: "%(default)s"')
    venn_parser.add_argument('--dpi', type=int, default=300,
                  help='Dots-per-inch (DPI) for the output plot. '
                       'Default is: --dpi=300')
    venn_parser.add_argument('--figsize',
                   help='Figure size for the output plot. '
                       'e.g. --figsize 8,10 Default is "%(default)s"')    
    venn_parser.add_argument('--fill', type=str,default='number',
                  help='Number or  percentage of overlaps (Only if --type=list)'
                       'Default is "%(default)s"')

    #upset
    upset_parser = subparsers.add_parser('upset', usage='intervene upset [options]', 
        description='Create UpSet diagram after intersection of BED or list sets.',
        help='UpSet diagram of BED or list sets.')

    upset_parser.add_argument('-a', dest="a", required=True, default=None, help='BED or list of genes/names file 1 (required)')
    upset_parser.add_argument('-b', dest="b", required=True, default=None, help='BED or list of genes/names file 2 (required)')
    upset_parser.add_argument('-c', dest="c", default=None, help='BED or list of genes/names file 3 (optional)')
    upset_parser.add_argument('-d', dest="d", default=None, help='BED or list of genes/names file 4 (optional)')
    upset_parser.add_argument('-e', dest="e", default=None, help='BED or list of genes/names file 5 (optional)')
    upset_parser.add_argument('-f', dest="f", default=None, help='BED or list of genes/names file 6 (optional)')
    
    upset_parser.add_argument('--type', dest='type', choices=('bed','list'),
                  help='Type of input sets. BED files or lists of genes. ')
   
    upset_parser.add_argument('--labels', dest='labels', default='A,B,C,D,E,F',
                  help='Comma-separated list of names for input files. '
                       'Default is: --labels=A,B,C,D,E,F')
   
    upset_parser.add_argument('--colors', dest='colors',
                  help='Comma-separated list of matplotlib-valid colors. '
                       'E.g., --colors=r,b,k')

    upset_parser.add_argument('-o', default='InterVene_output.pdf', 
                  help='Output file name with extension {name.pdf, name.svg, name.png}.'
                       'Default is: "%(default)s"')
 
    upset_parser.add_argument('--dpi', type=int, default=300,
                  help='Dots-per-inch (DPI) for the output. '
                       'Default is: --dpi=300')
    upset_parser.add_argument('--figsize',
                   help='Figure size for the output plot. '
                       'e.g. --figsize 8,10 Default is "%(default)s"')    
    upset_parser.add_argument('--fill', type=str,default='number',
                  help='Number or  percentage of overlaps (Only if --type=list)'
                       'Default is "%(default)s"')

    
    parser.add_argument('--test', action='store_true', help='This will run the program on test data.')
    
    parser.add_argument('-v','--version', dest='version', action='version', version='%(prog)s 1.0')


    options = parser.parse_args()

    if options.test:
        pybedtools.bedtool.random.seed(1)
        a = example_bedtool('rmsk.hg18.chr21.small.bed')
        b = example_bedtool('venn.b.bed')
        c = example_bedtool('venn.c.bed')
        options.a = a.fn
        options.b = b.fn
        options.c = c.fn
        #options.colors='r,b,g'
        options.o = 'bedVenn.png'
        options.labels = ['A','B','C']
        sys.exit(1)

    if not options.command:
        venn_parser.print_help()
        sys.stderr.write('Missing required arguments. ')
        sys.exit(1) 

    if options.command =='pairwise':
        print "\nPerformaing a pairwise intersection/overlap analysis.\n"
        os.system('intersection_matrix.py "%s" > bed_matrix.txt' % options.beds)

        sys.exit(1)

    #checke if there are atleast two (a & b) bed/list files    
    reqd_args = ['a','b']
    if not options.test:
        for ra in reqd_args:
            if not getattr(options,ra):
                if options.command == 'venn':
                    venn_parser.print_help()
                else:
                    upset_parser.print_help()
                sys.stderr.write('Missing required arg "%s"\n' % ra)
                sys.exit(1)

    if options.command == 'venn' or options.command == 'upset':
        if not options.type:
            if options.command == 'venn':
                venn_parser.print_help()
            else:
                upset_parser.print_help()
            sys.stderr.write('Missing required arg --type {bed,list}')
            sys.exit(0) 

    output_name =  options.o

    if helper.venn_ways(options) == 2:
        print('\nGenerating a 2-way "%s" diagram.\n' %options.command)
        if options.labels:
            label_names = options.labels.split(',')
        else:
            label_names = ['A','B']

        #If the input is a gene list
        if options.type == 'list':
            #print options.a[0]
            a = open(options.a, 'r').readlines()
            b = open(options.b, 'r').readlines()

            labels = venn.get_labels([a,b], fill=[str(options.fill)])
            fig, ax = venn.venn2(labels, names=label_names)
            
        #else input considered as bed file
        else:
            labels = intersect_2bed(a=options.a, b=options.b)
            fig, ax = venn.venn2(labels, names=[label_names])
     
    elif helper.venn_ways(options) == 3:
        print('\nGenerating a 3-way "%s" diagram.\n' %options.command)
        if options.labels:
            label_names = options.labels.split(',')
        else:
            label_names = ['A','B','C']
        #If the input is a gene list
        if options.type == 'list':
            a = open(options.a, 'r').readlines()
            b = open(options.b, 'r').readlines()
            c = open(options.c, 'r').readlines()
            labels = venn.get_labels([a, b, c], fill=[str(options.fill)])
            fig, ax = venn.venn3(labels, names=label_names)
            
        #else input considered as bed file
        else:
            labels = intersect_3bed(a=options.a, b=options.b, c=options.c)
            fig, ax = venn.venn3(labels, names=label_names)

    elif helper.venn_ways(options) == 4:
        print('\nGenerating a 4-way "%s" diagram.\n' %options.command)
        if options.labels:
            label_names = options.labels.split(',')
        else:
            label_names = ['A','B','C','D']
        #If the input is a gene list
        if options.type == 'list':

            if options.command == 'upset':
                cmd = 'intervene_upset_plot.R %s %s %s %s %s %s %s %s' % ('list',4,options.a,options.b,options.c,options.d, options.o, options.labels)
                os.system(cmd)
                sys.exit(1)

            else:
                a = open(options.a, 'r').readlines()
                b = open(options.b, 'r').readlines()
                c = open(options.c, 'r').readlines()
                d = open(options.d, 'r').readlines()
                labels = venn.get_labels([a, b, c, d], fill=[str(options.fill)])
                fig, ax = venn.venn4(labels, names=label_names)
            
        #else input considered as bed file
        else:
            labels = intersect_4bed(a=options.a, b=options.b, c=options.c, d=options.d)
            fig, ax = venn.venn4(labels, names=label_names, dpi=options.dpi)
            
                   
    elif helper.venn_ways(options) == 5:
        print('\nGenerating a 5-way "%s" diagram.\n' %options.command)
        if options.labels:
            label_names = options.labels.split(',')
        else:
            label_names = ['A','B','C','D','E']
        #If the input is a gene list
        if options.type == 'list':
            a = open(options.a, 'r').readlines()
            b = open(options.b, 'r').readlines()
            c = open(options.c, 'r').readlines()
            d = open(options.d, 'r').readlines()
            e = open(options.e, 'r').readlines()

            labels = venn.get_labels([a, b, c, d, e], fill=[str(options.fill)])
            fig, ax = venn.venn5(labels, names=label_names)
            
        #else input considered as bed file
        else:
            labels = intersect_5bed(a=options.a, b=options.b, c=options.c, d=options.d, e=options.e)
            fig, ax = venn.venn5(labels, names=label_names)
        
    elif helper.venn_ways(options) == 6:
        print('\nGenerating a 6-way "%s" diagram.\n' %options.command)
        if options.labels:
            label_names = options.labels.split(',')
        else:
            label_names = ['A','B','C','D','E','F']
        #If the input is a gene list
        if options.type == 'list':
            if options.ptype == 'upset':
                cmd = 'intervene_upset_plot.R %s %s %s %s %s %s %s %s %s %s' % ('list',6,options.a,options.b,options.c,options.d, options.e, options.f,options.o, options.labels)
                os.system(cmd)
                sys.exit(1)

            else:
                a = open(options.a, 'r').readlines()
                b = open(options.b, 'r').readlines()
                c = open(options.c, 'r').readlines()
                d = open(options.d, 'r').readlines()
                e = open(options.e, 'r').readlines()
                f = open(options.f, 'r').readlines()

                labels = venn.get_labels([a, b, c, d, e, f], fill=[str(options.fill)])
                fig, ax = venn.venn6(labels, names=label_names)
                
        #else input considered as bed file
        else:
            labels = intersect_6bed(a=options.a, b=options.b, c=options.c, d=options.d, e=options.e, f=options.f)
            fig, ax = venn.venn6(labels, names=label_names)
    else:
        parser.print_help()
        sys.stderr.write('Please make sure your arguments are correct.')
        sys.exit(1)

    fig.savefig(output_name, dpi=options.dpi, bbox_inches='tight')
    plt.close()
    print '\nYou are done! Please check your plot @ '+output_name+'. \nThank you for using InterVene!\n'


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("I got interrupted. :-( Bye!\n")
        sys.exit(0)
